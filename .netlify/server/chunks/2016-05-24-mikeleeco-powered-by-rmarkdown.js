import "clsx";
import { h as html } from "./html.js";
const metadata = {
  "title": "mikelee.co: Powered by RMarkdown, knitr, and Jekyll",
  "description": "Generating blog content made easier with R",
  "tags": ["R", "knitr", "Jekyll", "RMarkdown"],
  "date": "2016-05-24",
  "featured": false,
  "archived": true,
  "categories": "posts",
  "img": "/img/jekyll-blog.jpg"
};
const {
  title,
  description,
  tags,
  date,
  featured,
  archived,
  categories,
  img
} = metadata;
function _016_05_24_mikeleeco_powered_by_rmarkdown_md($$payload) {
  $$payload.out += `<blockquote><p>This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <a href="http://rmarkdown.rstudio.com" rel="nofollow">http://rmarkdown.rstudio.com</a>.</p></blockquote> <p>Spend a few months documenting code scripts in RStudio and you’ll have surely seen those introductory lines numerous times.</p> <p>This is also a R code script. And a markdown document. And an HTML page. All of which are generated within one .Rmd document. My site had previously supported by Github Pages and Jekyll, and now my preferred statistical software tool will streamline my blogging process. I expect this to make the transition from idea, analyses, visualization, and blog post production much more seamless.</p> <p><strong>Inspiration and First Steps</strong></p> <p>I first heard about the ability to generate and serve files within R from a <a href="https://twitter.com/rocksbrendan/status/656564982885146625" rel="nofollow">tweet</a> from Brendan Rocks.</p> <p>This workflow blew my mind at the time (still does) and the post in which he explains the scaffolding is very useful. Check it out <a href="https://brendanrocks.com/blogging-with-rmarkdown-knitr-jekyll/" rel="nofollow">here</a>.</p> <p>Adding in a <a href="https://github.com/mikeleeco/mikeleeco.github.com/tree/master/_source/2016-05-24-mikeleeco-powered-by-rmarkdown.Rmd" rel="nofollow"><code>_source</code></a> directory to store .Rmd files allows Yihui Xie’s <a href="https://github.com/yihui/servr" rel="nofollow">servr package</a> the ability to render markdown documents in <a href="https://github.com/mikeleeco/mikeleeco.github.com/tree/master/_posts/2016-05-24-mikeleeco-powered-by-rmarkdown.md" rel="nofollow"><code>_posts</code></a>, which Jekyll converts to HTML - which is what you are reading now!</p> <p><strong>Improving Syntax Highlighting</strong> <em>(with updates!)</em></p> <p>The first part of this post was pretty trivial given my previous experience with both jekyll and knitr. Adjusting syntax highlighting was a bit of a hiccup. Out of the box, code blocks in divs were being generated using my highlighter (rouge) but were being rendered with an “r” in front like so:</p> <p><code>r\`\`cat(paste(c("This","drove","me","mental D:"),sep=" "))</code></p> <p><code>## This drove me mental D:</code></p> <p>An earlier version of this post detailed a method of updating syntax highlighting using redcarpet markdown and pygments - a soon to be deprecated syntax highlighter. Turns out I wasn’t the only one having this issue! After more than a few missteps, and applying the advice from <a href="https://github.com/jekyll/jekyll/issues/1342" rel="nofollow">this post</a>, make sure you have both jekyll <a href="https://rubygems.org/pages/download" rel="nofollow">ruby</a> installed and updated! After updating your site infrastructure, add a css template with formatting options - such as my <a href="https://github.com/mikeleeco/mikeleeco.github.com/tree/master/public/css/syntax.css" rel="nofollow"><code>syntax.css</code></a>.</p> <p><strong>Final Result</strong></p> <pre class="language-r">${html(`<code class="language-r">cat<span class="token punctuation">(</span>paste<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token string">"Yay"</span><span class="token punctuation">,</span><span class="token string">"for"</span><span class="token punctuation">,</span><span class="token string">"making"</span><span class="token punctuation">,</span><span class="token string">"life"</span><span class="token punctuation">,</span><span class="token string">"easier!"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`)}</pre> <pre class="language-r">${html(`<code class="language-r"><span class="token comment">## Yay for making life easier!</span></code>`)}</pre> <p>Look how great that looks! Lets see what a function looks like.</p> <pre class="language-r">${html(`<code class="language-r">devtools<span class="token operator">::</span>install_github<span class="token punctuation">(</span><span class="token string">"mdlee12/sabr"</span><span class="token punctuation">)</span>
library<span class="token punctuation">(</span>sabr<span class="token punctuation">)</span>
sabr<span class="token operator">::</span>woba_season
<span class="token keyword">function</span> <span class="token punctuation">(</span>playerID <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> yearID <span class="token operator">=</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> <span class="token ellipsis">...</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    db <span class="token operator">&lt;-</span> lahman<span class="token punctuation">(</span><span class="token punctuation">)</span>
    woba_guts <span class="token operator">&lt;-</span> RSQLite<span class="token operator">::</span>dbGetQuery<span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">"SELECT * FROM wOBA_Table"</span><span class="token punctuation">)</span>
    wobayear <span class="token operator">&lt;-</span> woba_guts<span class="token punctuation">[</span>woba_guts<span class="token operator">$</span>yearID <span class="token operator">==</span> yearID<span class="token punctuation">,</span> <span class="token punctuation">]</span>
    wobayear <span class="token operator">&lt;-</span> data.frame<span class="token punctuation">(</span>wobayear<span class="token punctuation">)</span>
    query <span class="token operator">&lt;-</span> paste<span class="token punctuation">(</span>"SELECT GROUP_CONCAT<span class="token punctuation">(</span>DISTINCT teamID<span class="token punctuation">)</span> as teamID<span class="token punctuation">,</span>
                   SUM<span class="token punctuation">(</span>H<span class="token punctuation">)</span> as H<span class="token punctuation">,</span> SUM<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span> as DB<span class="token punctuation">,</span> SUM<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span> as TR<span class="token punctuation">,</span>SUM<span class="token punctuation">(</span>HR<span class="token punctuation">)</span> as HR<span class="token punctuation">,</span>
                   SUM<span class="token punctuation">(</span>AB<span class="token punctuation">)</span> as AB<span class="token punctuation">,</span> SUM<span class="token punctuation">(</span>BB<span class="token punctuation">)</span> as BB<span class="token punctuation">,</span> SUM<span class="token punctuation">(</span>IBB<span class="token punctuation">)</span> as IBB<span class="token punctuation">,</span> SUM<span class="token punctuation">(</span>SF<span class="token punctuation">)</span> as SF<span class="token punctuation">,</span>
                   SUM<span class="token punctuation">(</span>SH<span class="token punctuation">)</span> as SH<span class="token punctuation">,</span> SUM<span class="token punctuation">(</span>HBP<span class="token punctuation">)</span> as HBP FROM Batting WHERE playerID <span class="token operator">=</span> '"<span class="token punctuation">,</span>
                   playerID<span class="token punctuation">,</span> <span class="token string">"' AND yearID = '"</span><span class="token punctuation">,</span> yearID<span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span>
    db <span class="token operator">&lt;-</span> lahman<span class="token punctuation">(</span><span class="token punctuation">)</span>
    query <span class="token operator">&lt;-</span> RSQLite<span class="token operator">::</span>dbGetQuery<span class="token punctuation">(</span>db<span class="token punctuation">,</span> query<span class="token punctuation">)</span>
    query <span class="token operator">&lt;-</span> as.data.frame<span class="token punctuation">(</span>query<span class="token punctuation">)</span>
    uBB <span class="token operator">&lt;-</span> wobayear<span class="token operator">$</span>wobaBB <span class="token operator">*</span> <span class="token punctuation">(</span>query<span class="token operator">$</span>BB <span class="token operator">-</span> query<span class="token operator">$</span>IBB<span class="token punctuation">)</span>
    HBP <span class="token operator">&lt;-</span> wobayear<span class="token operator">$</span>wobaHB <span class="token operator">*</span> <span class="token punctuation">(</span>query<span class="token operator">$</span>HBP<span class="token punctuation">)</span>
    DB <span class="token operator">&lt;-</span> wobayear<span class="token operator">$</span>woba2B <span class="token operator">*</span> <span class="token punctuation">(</span>query<span class="token operator">$</span>DB<span class="token punctuation">)</span>
    TR <span class="token operator">&lt;-</span> wobayear<span class="token operator">$</span>woba3B <span class="token operator">*</span> <span class="token punctuation">(</span>query<span class="token operator">$</span>TR<span class="token punctuation">)</span>
    HR <span class="token operator">&lt;-</span> wobayear<span class="token operator">$</span>wobaHR <span class="token operator">*</span> <span class="token punctuation">(</span>query<span class="token operator">$</span>HR<span class="token punctuation">)</span>
    H <span class="token operator">&lt;-</span> wobayear<span class="token operator">$</span>woba1B <span class="token operator">*</span> <span class="token punctuation">(</span>query<span class="token operator">$</span>H <span class="token operator">-</span> query<span class="token operator">$</span>DB <span class="token operator">-</span> query<span class="token operator">$</span>TR <span class="token operator">-</span> query<span class="token operator">$</span>HR<span class="token punctuation">)</span>
    AB <span class="token operator">&lt;-</span> query<span class="token operator">$</span>AB
    BB <span class="token operator">&lt;-</span> query<span class="token operator">$</span>BB
    IBB <span class="token operator">&lt;-</span> query<span class="token operator">$</span>IBB
    SF <span class="token operator">&lt;-</span> query<span class="token operator">$</span>SF
    SH <span class="token operator">&lt;-</span> query<span class="token operator">$</span>SH
    PA <span class="token operator">&lt;-</span> query<span class="token operator">$</span>PA
    woba <span class="token operator">&lt;-</span> <span class="token punctuation">(</span>uBB <span class="token operator">+</span> HBP <span class="token operator">+</span> H <span class="token operator">+</span> DB <span class="token operator">+</span> TR <span class="token operator">+</span> HR<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>AB <span class="token operator">+</span> BB <span class="token operator">-</span> IBB <span class="token operator">+</span> SF <span class="token operator">+</span> HBP<span class="token punctuation">)</span>
    woba
<span class="token punctuation">&#125;</span></code>`)}</pre> <div class="row"><div class="col-sm-6 col-sm-offset-3"><img src="https://i.imgur.com/Z0MX0qd.gif" alt="Neat gif" class="img-responsive center-block"/></div></div> <p>How about some numbers:</p> <pre class="language-r">${html(`<code class="language-r"><span class="token number">6</span><span class="token operator">*</span><span class="token number">9</span></code>`)}</pre> <pre class="language-r">${html(`<code class="language-r"><span class="token comment">## [1] 54</span></code>`)}</pre> <pre class="language-r">${html(`<code class="language-r">sabr<span class="token operator">::</span>woba_season<span class="token punctuation">(</span><span class="token string">"yountro01"</span><span class="token punctuation">,</span><span class="token number">1982</span><span class="token punctuation">)</span></code>`)}</pre> <pre class="language-r">${html(`<code class="language-r"><span class="token comment">## [1] 0.414997</span></code>`)}</pre> <p>You can also embed plots. For example:</p> <pre class="language-r">${html(`<code class="language-r"><span class="token comment"># Much plots. Such scatter.</span>
plot<span class="token punctuation">(</span>iris<span class="token punctuation">)</span></code>`)}</pre> <img src="/img/rmarkdown.png" title="plot of chunk unnamed-chunk-6" alt="plot of chunk unnamed-chunk-6" style="display: block; margin: auto;"/> <p>More to come soon :D</p>`;
}
export {
  _016_05_24_mikeleeco_powered_by_rmarkdown_md as default,
  metadata
};
