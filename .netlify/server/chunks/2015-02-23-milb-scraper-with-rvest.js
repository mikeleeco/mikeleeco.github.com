import "clsx";
import { h as html } from "./html.js";
const metadata = {
  "title": "Let's Make a Minor League Baseball Database!",
  "description": "A step-by-step tutorial to make your own Minor League Baseball Database using rvest.",
  "tags": [
    "R",
    "rvest",
    "HTML scraper",
    "data",
    "sports",
    "MiLB",
    "MLB"
  ],
  "date": "2015-02-23",
  "featured": true,
  "categories": "posts",
  "img": "/img/bryant.jpg"
};
const { title, description, tags, date, featured, categories, img } = metadata;
function _015_02_23_milb_scraper_with_rvest_md($$payload) {
  $$payload.out += `<p>Baseball is a game of numbers, some more accessible than others. Rates, averages, linear weights, aging curves, and WAR are only a few of the myriad statistics influencing decision makers in MLB franchises. An endless amount of data is accessible to the average fan at many sites, most notably the <a href="http://www.seanlahman.com/baseball-archive/statistics/">Lahman Baseball Database</a>, which is the most robust catalog of MLB player statistics available to the public.</p> <p>One area of relatively limited accessibility to the average fan is statistics for Minor League players. Though player statistics by position, year, and team are available at many sites, a thorough catalog of MiLB data akin to the Lahman database is unavailable. I wonder who <a href="http://www.baseball-reference.com/minors/player.cgi?id=bryant001kri">Kris Bryant</a> would be most similar to?</p> <p>What do you mean Baseball Reference doesn’t calculate similarity scores for minor league players?</p> <a class="btn btn-success btn-lg btn-block" href="https://www.youtube.com/watch?v=bnRrvOb0m-I">As If Button</a> <strong><h2>Let's make our own damn database!</h2></strong> <p>To make our database we’re going to use <a href="https://github.com/hadley/rvest">rvest</a>, an R package designed by Hadley Wickham at RStudio [^1]. The package scrapes HTML from webpages and extracts it into readable data. Let’s load the necessary packages and go from there:</p> <pre class="language-r">${html(`<code class="language-r"><span class="token comment">#if you haven't done so already, install rvest from Wickham's github repository</span>
<span class="token comment"># install.packages("devtools")</span>
<span class="token comment"># install_github("hadley/rvest")</span>
c<span class="token punctuation">(</span><span class="token string">'rvest'</span><span class="token punctuation">,</span><span class="token string">'dplyr'</span><span class="token punctuation">)</span> <span class="token operator">-></span> packages <span class="token comment">#installs packages</span>
lapply<span class="token punctuation">(</span>packages<span class="token punctuation">,</span> library<span class="token punctuation">,</span> character.only <span class="token operator">=</span> T<span class="token punctuation">)</span></code>`)}</pre> <p>The function below will construct each team’s minor league website, for every desired year, and pull out the same table every time.</p> <pre class="language-r">${html(`<code class="language-r"><span class="token comment"># prep scraper</span>
url <span class="token operator">&lt;-</span> <span class="token string">"http://www.baseball-reference.com/minors/"</span>
teams<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">"ARI"</span><span class="token punctuation">)</span>
stats_table <span class="token operator">&lt;-</span> <span class="token string">'#team_batting.sortable.stats_table'</span>
stats_id <span class="token operator">&lt;-</span> paste0<span class="token punctuation">(</span>stats_table<span class="token punctuation">,</span><span class="token string">' a'</span><span class="token punctuation">)</span></code>`)}</pre> <p>Let’s start with the Arizona Diamondbacks batting statistics from 2012-2014. We’ll call the data frame we’re about to pull the variable <strong>“minors_batting_ARI”</strong>. We’re reconstructing the url <code><a href="http://www.baseball-reference.com/minors/affiliate.cgi?id=ARI&amp;year=2014" rel="nofollow">http://www.baseball-reference.com/minors/affiliate.cgi?id=ARI&amp;year=2014</a></code> and instructing the scraper to pull the necessary data table and then repeat the process for next season. We’re calling the pulled data table ‘df’ for simplicity.</p> <pre class="language-r">${html(`<code class="language-r">minors_batting_ARI <span class="token operator">&lt;-</span> data.frame<span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment"># for loop by teams and seasonfor (teams in teams)&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>season <span class="token keyword">in</span> <span class="token number">2014</span><span class="token operator">:</span><span class="token number">2012</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    html <span class="token operator">&lt;-</span> paste<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">"affiliate.cgi?id="</span><span class="token punctuation">,</span>teams<span class="token punctuation">,</span><span class="token string">"&amp;year="</span><span class="token punctuation">,</span>season<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>

    <span class="token comment"># batting stats</span>
    read_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      html_nodes<span class="token punctuation">(</span>stats_table<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      html_table<span class="token punctuation">(</span>header <span class="token operator">=</span> T<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      data.frame<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      tbl_df<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> df</code>`)}</pre> <p>So far our code will scrape the batting table from the team’s minor league page, but we also need to extract each player’s Minor League baseball-reference id using it’s href. Isn’t that right Chris Young? No. Not you, <a href="http://www.baseball-reference.com/players/y/youngch04.shtml">Chris Young</a>. The other, lankier <a href="http://www.baseball-reference.com/players/y/youngch03.shtml">Chris Young</a>. We’re good man, no need to <a href="http://youtu.be/1EiqELgKp5g?t=56s">get angry</a>.</p> <p>This portion of code extracts the attributes of the URL in the table and changes them into characters:</p> <pre class="language-r">${html(`<code class="language-r">    <span class="token comment"># player info</span>
    read_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      html_nodes<span class="token punctuation">(</span>stats_id<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      html_attr<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"href"</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span> unlist <span class="token percent-operator operator">%>%</span> as.character <span class="token operator">-></span> min_playerid</code>`)}</pre> <p>Using R formatting code we delete unnecessary rows and create a column called <i>bref_player_id</i> to assign each player’s unique reference id. We’re trimming out characters from the href attributes we don’t need, leaving only the reference ids.</p> <pre class="language-r">${html(`<code class="language-r">    <span class="token comment"># clean dataframe and add team and season info</span>
    df <span class="token operator">&lt;-</span> df<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span>nrow<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
    df <span class="token operator">&lt;-</span> df<span class="token punctuation">[</span><span class="token operator">!</span>na.omit<span class="token punctuation">(</span>df<span class="token operator">$</span>Rk<span class="token operator">==</span><span class="token string">'Rk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
    df<span class="token operator">$</span>season <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span>season<span class="token punctuation">)</span>
    df<span class="token operator">$</span>teams <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span>teams<span class="token punctuation">)</span>

    <span class="token comment"># remove url data</span>
    min_playerid<span class="token operator">=</span>gsub<span class="token punctuation">(</span><span class="token string">"/register/player.cgi?id="</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> min_playerid<span class="token punctuation">,</span>fixed <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>
    df<span class="token operator">$</span>min_playerid <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span>min_playerid<span class="token punctuation">)</span>

    <span class="token comment"># bind to dataframe</span>
    minors_batting_ARI <span class="token operator">&lt;-</span> rbind<span class="token punctuation">(</span>minors_batting_ARI<span class="token punctuation">,</span>df<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`)}</pre> <pre class="language-r">${html(`<code class="language-r"><span class="token comment">#to view the dataset and save it as a .csv in our working directory</span>
View<span class="token punctuation">(</span>minors_batting_ARI<span class="token punctuation">)</span>
write.csv<span class="token punctuation">(</span>minors_batting_ARI<span class="token punctuation">,</span> <span class="token string">"minors_batting_ARI.csv"</span><span class="token punctuation">)</span></code>`)}</pre> <p>There we are! Arizona’s minor league batting stats from 2012-2014! 824 instances may seem like too much, for only a three year period, but Baseball-reference.com doesn’t aggregate a player’s statistics by year; they do it by level. Therefore, some players may have multiple rows for the same season (aren’t you glad we pulled out the reference id!)</p> <div class="container"><figure><img src="/img/minors_batting_ARI.jpg" alt="minors_batting_ARI" class="img-responsive"/></figure></div> <p>… let’s take a left turn on <a href="http://hardballtalk.nbcsports.com/2013/01/25/the-diamondbacks-are-travelling-down-grit-avenue-and-guts-boulevard-and-grind-parkway/">Grind Parkway</a> and pull in <strong>all MiLB batting statistics for 2014</strong>.</p> <h2>MiLB Batting Stats for All Teams</h2> <p>First we’ll need a list of baseball-reference’s team codes. I’ll do the dirty work and include franchise codes for each team since 1969 if you want to play with that data <sup class="bootstrap-footnote" data-text="For future investigations be aware that other pages of baseball reference use archived team codes such as MON (Montreal Expos) and CAL (California Angels).">2</sup>.</p> <pre class="language-r">${html(`<code class="language-r">teams<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">"ARI"</span><span class="token punctuation">,</span><span class="token string">"ATL"</span><span class="token punctuation">,</span><span class="token string">"BAL"</span><span class="token punctuation">,</span><span class="token string">"BOS"</span><span class="token punctuation">,</span><span class="token string">"CHC"</span><span class="token punctuation">,</span><span class="token string">"CHW"</span><span class="token punctuation">,</span><span class="token string">"CIN"</span><span class="token punctuation">,</span><span class="token string">"CLE"</span><span class="token punctuation">,</span><span class="token string">"COL"</span><span class="token punctuation">,</span><span class="token string">"DET"</span><span class="token punctuation">,</span><span class="token string">"HOU"</span><span class="token punctuation">,</span><span class="token string">"KCR"</span><span class="token punctuation">,</span><span class="token string">"ANA"</span><span class="token punctuation">,</span><span class="token string">"LAD"</span><span class="token punctuation">,</span><span class="token string">"FLA"</span><span class="token punctuation">,</span><span class="token string">"MIL"</span><span class="token punctuation">,</span><span class="token string">"MIN"</span><span class="token punctuation">,</span><span class="token string">"NYM"</span><span class="token punctuation">,</span><span class="token string">"NYY"</span><span class="token punctuation">,</span><span class="token string">"OAK"</span><span class="token punctuation">,</span><span class="token string">"PHI"</span><span class="token punctuation">,</span><span class="token string">"PIT"</span><span class="token punctuation">,</span><span class="token string">"SDP"</span><span class="token punctuation">,</span><span class="token string">"SFG"</span><span class="token punctuation">,</span><span class="token string">"SEA"</span><span class="token punctuation">,</span><span class="token string">"STL"</span><span class="token punctuation">,</span><span class="token string">"TBD"</span><span class="token punctuation">,</span><span class="token string">"TEX"</span><span class="token punctuation">,</span><span class="token string">"TOR"</span><span class="token punctuation">,</span><span class="token string">"WSN"</span><span class="token punctuation">)</span></code>`)}</pre> <pre class="language-r">${html(`<code class="language-r">url <span class="token operator">&lt;-</span> <span class="token string">"http://www.baseball-reference.com/minors/"</span>
teams<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">"ARI"</span><span class="token punctuation">,</span><span class="token string">"ATL"</span><span class="token punctuation">,</span><span class="token string">"BAL"</span><span class="token punctuation">,</span><span class="token string">"BOS"</span><span class="token punctuation">,</span><span class="token string">"CHC"</span><span class="token punctuation">,</span><span class="token string">"CHW"</span><span class="token punctuation">,</span><span class="token string">"CIN"</span><span class="token punctuation">,</span><span class="token string">"CLE"</span><span class="token punctuation">,</span><span class="token string">"COL"</span><span class="token punctuation">,</span><span class="token string">"DET"</span><span class="token punctuation">,</span><span class="token string">"HOU"</span><span class="token punctuation">,</span><span class="token string">"KCR"</span><span class="token punctuation">,</span><span class="token string">"ANA"</span><span class="token punctuation">,</span><span class="token string">"LAD"</span><span class="token punctuation">,</span><span class="token string">"FLA"</span><span class="token punctuation">,</span><span class="token string">"MIL"</span><span class="token punctuation">,</span><span class="token string">"MIN"</span><span class="token punctuation">,</span><span class="token string">"NYM"</span><span class="token punctuation">,</span><span class="token string">"NYY"</span><span class="token punctuation">,</span><span class="token string">"OAK"</span><span class="token punctuation">,</span><span class="token string">"PHI"</span><span class="token punctuation">,</span><span class="token string">"PIT"</span><span class="token punctuation">,</span><span class="token string">"SDP"</span><span class="token punctuation">,</span><span class="token string">"SFG"</span><span class="token punctuation">,</span><span class="token string">"SEA"</span><span class="token punctuation">,</span><span class="token string">"STL"</span><span class="token punctuation">,</span><span class="token string">"TBD"</span><span class="token punctuation">,</span><span class="token string">"TEX"</span><span class="token punctuation">,</span><span class="token string">"TOR"</span><span class="token punctuation">,</span><span class="token string">"WSN"</span><span class="token punctuation">)</span>
stats_table <span class="token operator">&lt;-</span> <span class="token string">'#team_batting.sortable.stats_table'</span>
stats_id <span class="token operator">&lt;-</span> paste0<span class="token punctuation">(</span>stats_table<span class="token punctuation">,</span><span class="token string">' a'</span><span class="token punctuation">)</span>
minors_batting <span class="token operator">&lt;-</span> data.frame<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># for loop by teams and season</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>teams <span class="token keyword">in</span> teams<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>season <span class="token keyword">in</span> <span class="token number">2014</span><span class="token operator">:</span><span class="token number">2014</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    html <span class="token operator">&lt;-</span> paste<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token string">"affiliate.cgi?id="</span><span class="token punctuation">,</span>teams<span class="token punctuation">,</span><span class="token string">"&amp;year="</span><span class="token punctuation">,</span>season<span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>

    <span class="token comment"># batting stats</span>
    read_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      html_nodes<span class="token punctuation">(</span>stats_table<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      html_table<span class="token punctuation">(</span>header <span class="token operator">=</span> T<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      data.frame<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      tbl_df<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> df

    <span class="token comment"># player info</span>
    read_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      html_nodes<span class="token punctuation">(</span>stats_id<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>
      html_attr<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"href"</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span> unlist <span class="token percent-operator operator">%>%</span> as.character <span class="token operator">-></span> min_playerid

    <span class="token comment"># clean dataframe and add team and season info</span>
    df <span class="token operator">&lt;-</span> df<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span>nrow<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
    df <span class="token operator">&lt;-</span> df<span class="token punctuation">[</span><span class="token operator">!</span>na.omit<span class="token punctuation">(</span>df<span class="token operator">$</span>Rk<span class="token operator">==</span><span class="token string">'Rk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
    df<span class="token operator">$</span>season <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span>season<span class="token punctuation">)</span>
    df<span class="token operator">$</span>teams <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span>teams<span class="token punctuation">)</span>

    <span class="token comment"># remove url data</span>
    min_playerid<span class="token operator">=</span>gsub<span class="token punctuation">(</span><span class="token string">"/register/player.cgi?id="</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> min_playerid<span class="token punctuation">,</span>fixed <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span>
    df<span class="token operator">$</span>min_playerid <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span>min_playerid<span class="token punctuation">)</span>

    <span class="token comment"># bind to</span>
    minors_batting <span class="token operator">&lt;-</span> rbind<span class="token punctuation">(</span>minors_batting<span class="token punctuation">,</span>df<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code>`)}</pre> <p>To query other seasons or teams, simply change the information selected. For example:</p> <pre class="language-r">${html(`<code class="language-r">teams<span class="token operator">=</span>c<span class="token punctuation">(</span><span class="token string">"OAK"</span><span class="token punctuation">,</span><span class="token string">"TBD"</span><span class="token punctuation">)</span>

stats_table <span class="token operator">&lt;-</span> <span class="token string">'#team_batting.sortable.stats_table'</span>
stats_id <span class="token operator">&lt;-</span> paste0<span class="token punctuation">(</span>stats_table<span class="token punctuation">,</span><span class="token string">' a'</span><span class="token punctuation">)</span>
minors_batting <span class="token operator">&lt;-</span> data.frame<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>teams <span class="token keyword">in</span> teams<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>season <span class="token keyword">in</span> <span class="token number">2010</span><span class="token operator">:</span><span class="token number">2005</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></code>`)}</pre> <p>Will pull in minor league batting statistics for Oakland and Tampa Bay for the years 2005-2010.</p> <p>Lets clean up all of the stray objects besides the <code>minors_batting</code> dataframe in our working environment before moving on:</p> <pre class="language-r">${html(`<code class="language-r">rm<span class="token punctuation">(</span>list<span class="token operator">=</span>setdiff<span class="token punctuation">(</span>ls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"minors_batting"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`)}</pre> <h3>Obligatory heads up!</h3> <p>This code is querying 30 distinct URLs for every season, so multi-season outputs can take some time. Here are my system.time indicators for the above function:</p> <img src="/img/sys_time_MiLB.jpg" alt="sys_time_MiLB"/> <p>The query takes about a 1:45 for every league-wide season pull. <strong>Pro-Tip!</strong> Get that query going and have some breakfast/lunch/dinner.</p> <h4>Coming up...</h4> <p>Stay tuned to the site for another post about similarity scores and to learn more about Kris Bryant’s best comparisons.</p> <hr/> <h1>Update (10/3/2017)</h1> <p>Baseball Reference has made slight alterations to their website that has deprecated the code above as originally published. An updated version of the scraper code can be found at my <a href="https://github.com/mikeleeco/Baseball-Reference-Scrapers">MiLB Scraper on github</a>. Feel free to fork my repository to propose changes. <a class="btn btn-primary" href="https://github.com/mikeleeco/Baseball-Reference-Scrapers/fork">Edit My Code</a></p>`;
}
export {
  _015_02_23_milb_scraper_with_rvest_md as default,
  metadata
};
